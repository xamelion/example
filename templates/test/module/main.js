// Generated by CoffeeScript 1.8.0
(function() {
  App.Factory.api = function($http, $q, $rootScope, cfpLoadingBar) {
    var http;
    http = function(method, params, type, callback, blockLoading, contentType) {
      var data, deferred, link, parse;
      data = type !== "GET" ? params : {};
      params = type !== "GET" ? {} : params;
      parse = method.split("/");
      deferred = $q.defer();
      link = (parse[0] === "http:" ? method : config.Api + method);

      /* Скрипт отображение загрузчика */
      cfpLoadingBar.start();
      cfpLoadingBar.inc();
      cfpLoadingBar.set(0.3);
      cfpLoadingBar.status();

      /*  Запрос http ангулар */
      $http({
        method: "jsonp",
        url: link,
        params: params,
        data: data,
        headers: {
          "Content-Type": contentType
        }
      }).success(function(data, status) {
        cfpLoadingBar.complete();
        callback({
          data: data,
          status: status
        });
      }).error(function(data, status) {
        cfpLoadingBar.complete();
        if (blockLoading === true) {
          $rootScope.blockLoading = false;
        }

        /* Отображаем ошибку */
        $rootScope.$broadcast("error", {
          title: "Ошибка ",
          message: data.message
        });
        deferred.reject(status);
        callback({
          data: data,
          status: status
        });
      });
      return deferred.promise;
    };
    return {
      get: function(method, params, callback, blockLoading, contentType) {
        return http(method, params, "GET", callback, (typeof blockLoading === "undefined" ? false : blockLoading), (typeof contentType === "undefined" ? "application/json" : contentType));
      },
      post: function(method, params, callback, blockLoading, contentType) {
        return http(method, params, "POST", callback, (typeof blockLoading === "undefined" ? false : blockLoading), (typeof contentType === "undefined" ? "application/json" : contentType));
      },
      put: function(method, params, callback, blockLoading, contentType) {
        return http(method, params, "PUT", callback, (typeof blockLoading === "undefined" ? false : blockLoading), (typeof contentType === "undefined" ? "application/json" : contentType));
      },
      "delete": function(method, params, callback, blockLoading, contentType) {
        return http(method, params, "DELETE", callback, (typeof blockLoading === "undefined" ? false : blockLoading), (typeof contentType === "undefined" ? "application/json" : contentType));
      }
    };
  };


  /*
  Основной контроллер приложения
  @author Vitaliy Kanev (1xamelion1@gmail.com)
  @since 0.0.0.1
   */

  App.Controller.MainApp.Main = function($rootScope, $scope, $window, testService, testValue) {

    /* Скрипты выполняемые при смене страницы */
    return $scope.$on("$viewAllContentLoaded", function() {});
  };


  /*
  Общие переменные приложения
  @author Vitaliy Kanev (1xamelion1@gmail.com)
  @since 0.0.0.1
   */

  App.Value.testValue = {
    title: "",
    photos_id: false,
    photos_public: []
  };


  /*
  Общие сервисы приложения
  @author Vitaliy Kanev (1xamelion1@gmail.com)
  @since 0.0.0.1
   */

  App.Service.testService = function($rootScope, testValue) {
    this.title = function(title) {
      testValue.title = title;
      $("title").text(title);
    };
  };

}).call(this);

//# sourceMappingURL=main.js.map
